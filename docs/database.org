#+title: Database Design Document
#+Author: M.S.Soumya

* Database design considerations
  - The database should not be tightly coupled with running
    tests or the visualization module.
  - It must be flexible enough so as to allow a change in
    the schema without breaking or hindering
    interfaced/dependent processes.
  - Regeneration of DB should be easy and simple.

* SQL vs KV DB
  KV DB allows flexibility in the structure of the data
  captured.  

  There are concerns related to data-integrity in KV
  DBs. But our tests and the results generated are
  automated. The types of the data related to a particular
  configuration/result is fixed and will not vary.
  
  Querying in Document store and SQL is easier. Whereas the
  complexity of the query increases in the KV DBs.

* Comparison between existing DBs
|-------------+-----------------+-------------+-----------------+---------+----------+-----------------+---------------|
| *DB*        | *Type*          | *Community* | *Python*        | *Easy*  | *Ease*   | *Performance*   | *Reliability* |
|             |                 | *support*   | *Integration*   | *setup* | *of use* |                 |               |
|-------------+-----------------+-------------+-----------------+---------+----------+-----------------+---------------|
| TinyDB      | document        | Medium      | Native          | yes     | easy     |                 |               |
|             | store           |             |                 |         |          |                 |               |
|-------------+-----------------+-------------+-----------------+---------+----------+-----------------+---------------|
| CodernityDB | KV              | Inactive    | Native          | yes     |          | fast            |               |
|-------------+-----------------+-------------+-----------------+---------+----------+-----------------+---------------|
| UnQLite     | document store, | Low         | C based,        | yes     | easy     | Performs RW     | High          |
|             | KV              |             | but has         |         |          | from disk files |               |
|             |                 |             | python bindings |         |          |                 |               |
|-------------+-----------------+-------------+-----------------+---------+----------+-----------------+---------------|
| SQLite      | SQL             | High        | Yes             | yes     | medium   | Performs RW     | High          |
|             |                 |             |                 |         |          | from disk files |               |
|             |                 |             |                 |         |          |                 |               |
|-------------+-----------------+-------------+-----------------+---------+----------+-----------------+---------------|
| BerkeleyDB  | KV              | Low         | C based,        |         |          |                 |               |
|             |                 |             | python bindings |         |          |                 |               |
|             |                 |             | available       |         |          |                 |               |
|-------------+-----------------+-------------+-----------------+---------+----------+-----------------+---------------|
| MongoDB     | document store  | high        | Native          | yes     | simple   | fast            | High          |
|             |                 |             |                 |         |          |                 |               |
|-------------+-----------------+-------------+-----------------+---------+----------+-----------------+---------------|

* Important / Necessary Datafields
  There are 3 buckets into which the data can be
  divided. They are the Ceph configurations, CBT
  configurations and data from the results generated by the
  tests. 
  
* Integrating datafields into schema
  
